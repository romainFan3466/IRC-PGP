
##############################################################################
# Context manager for connecting/disconnecting to a database.
##############################################################################

import mysql.connector

class UseDatabase:
    def __init__(self, configuration:dict):
        """Add the database configuration parameters to the object.

        This class expects a single dictionary argument which needs to assign the
        appropriate values to (at least) the following keys:
       
            host - the IP address of the host running MySQL/MariaDB.
            user - the MySQL/MariaDB username to use.
            password - the user's password.
            database - the name of the database to use.

        For more options, refer to the mysql-connector-python documentation.
        """
        self.host = configuration['host']
        self.user = configuration['user']
        self.password = configuration['password']
        self.database = configuration['database']

        self.config = configuration

    def __enter__(self) -> 'cursor':
        """Connect to database and create a DB cursor. 
        
        Return the database cursor to the context manager.
        """        
        self.conn = mysql.connector.connect( host=self.host, 
                                             user=self.user,
                                             password=self.password,
                                             database=self.database)
        self.cursor = self.conn.cursor()
        return self.cursor    

    def __exit__(self, exc_type, exc_value, exc_traceback):
        """Destroy the cursor as well as the connection (after committing). 
        
        Ignore any exceptions generated by the context managed code (for now).
        """
        self.cursor.close()
        self.conn.commit()
        self.conn.close()
